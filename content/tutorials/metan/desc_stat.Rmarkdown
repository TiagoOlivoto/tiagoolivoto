+++
title = "Descriptive statistics in R with metan"
linktitle = "Descriptive"
date = "2020/04/03"
toc = true  # Show table of contents? true/false
type = "docs"  # Do not modify.
[menu.metan]
    parent = "R package metan"
    weight = 2
+++

```{r global_options, include = FALSE}
knitr::opts_chunk$set(cache = TRUE, comment = "#", fig.align = "center", collapse = TRUE)
```


## Getting started

In this quick tip, I will show you how to compute descriptive statistics in R with the package [metan](https://tiagoolivoto.github.io/metan/). If the package is not yet installed, you can download the stable version from [CRAN](https://cran.r-project.org/web/packages/metan/) with:

```{r, eval=FALSE}
install.packages("metan")

```

Then, load it with:
```{r message=FALSE, warning=FALSE}
library(metan)
```

For the latest release notes see the [NEWS file](https://tiagoolivoto.github.io/metan/news/index.html).

## Statistics by levels of a factor
`metan` provides a simple and intuitive pipe-friendly framework for computing descriptive statistics.  A [set of functions](https://tiagoolivoto.github.io/metan/reference/utils_stats.html) can be used to compute the most used descriptive statistics quickly. In this tutorial, we will use the data example `data_ge2` to create motivating examples.

To compute the mean values for each level of the factor `GEN` we use the function `means_by()`.
```{r}
means_by(data_ge2, GEN)

```

The following `_by()` functions are available for computing the main descriptive statistics by levels of a factor.

 - `cv_by()` For computing coefficient of variation.
 - `max_by()` For computing maximum values.
 - `means_by()` For computing arithmetic means.
 - `min_by()` For compuing minimum values.
 - `n_by()` For getting the length.
 - `sd_by()` For computing sample standard deviation.
 - `sem_by()` For computing standard error of the mean .

## Useful functions
Other useful functions are also implemented. All of them works naturally with `%>%`, handle grouped data with `group_by()` and multiple variables (all numeric variables from `.data` by default).
 
 - `av_dev()` computes the average absolute deviation.
 - `ci_mean()` computes the confidence interval for the mean.
 - `cv()` computes the coefficient of variation.
 - `freq_table()` Computes frequency fable.
 - `hm_mean()`, `gm_mean()` computes the harmonic and geometric means, respectively. The harmonic mean is the reciprocal of the arithmetic mean of the reciprocals. The geometric mean is the nth root of n products.
 - `kurt()` computes the kurtosis like used in SAS and SPSS.
 - `range_data()` Computes the range of the values.
 - `sd_amo()`, `sd_pop()` Computes sample and populational standard deviation, respectively.
 - `sem()` computes the standard error of the mean.
 - `skew()` computes the skewness like used in SAS and SPSS.
 - `sum_dev()` computes the sum of the absolute deviations.
 - `sum_sq_dev()` computes the sum of the squared deviations.
 - `var_amo()`, `var_pop()` computes sample and populational variance.
 - `valid_n()` Return the valid (not NA) length of a data.

## The wrapper function `desc_stat()`

To compute all statistics at once we can use `desc_stat()`. This is a wrapper function around the above ones and may be used to compute measures of central tendency, position, and dispersion. By default (`stats = "main"`), seven statistics (coefficient of variation, maximum, mean, median, minimum, sample standard deviation, standard error and confidence interval of the mean) are computed. Other allowed values are `"all"` to show all the statistics, `"robust"` to show robust statistics, `"quantile"` to show quantile statistics, or chose one (or more) statistics using a comma-separated vector with the statistic names, e.g., `stats = c("mean, cv")`. We can also use `hist = TRUE` to create a histogram for each variable. Here, select helpers can also be used in the argument `...`.

### All statistics for all numeric variables
```{r, message=FALSE, fig.height = 5, fig.width = 10, fig.align = "center" }
desc_stat(data_ge2, stats = "all")
```

### Robust statistics using select helpers
```{r, message=FALSE, fig.height = 5, fig.width = 10, fig.align = "center" }
data_ge2 %>%
  desc_stat(contains("N"),
            stats = "robust")
```

### Quantile functions choosing variable names
```{r, message=FALSE, fig.height = 5, fig.width = 10, fig.align = "center" }
data_ge2 %>%
  desc_stat(PH, EH, CD, ED,
            stats = "quantile")
```

### Create a histogram for each variable
```{r, message=FALSE, fig.height = 3.33, fig.width = 10, fig.align = "center" }
data_ge2 %>%
  desc_stat(EP, EL, CL,
            hist = TRUE)
```

### Statistics by levels of factors
To compute the statistics for each level of a factor, use the argument `by`. In addition, it is possible to select the statistics to compute using the argument `stats`, that is a single statistic name, e.g., `"mean"`, or a a comma-separated vector of names with `"` at the beginning and end of vector only. Note that the statistic names **ARE NOT** case sensitive, i.e., both `"mean"`, `"Mean"`, or  `"MEAN"` are recognized. Comma or spaces can be used to separate the statistics' names.

* All options bellow will work:
   * `stats = c("mean, se, cv, max, min")`
   * `stats = c("mean se cv max min")`
   * `stats = c("MEAN, Se, CV max MIN")`


```{r, message=FALSE, fig.height = 5, fig.width = 5.5, fig.align = "center" }
desc_stat(data_ge2,
          contains("C"),
          stats = ("mean, se, cv, max, min"),
          by = ENV)
```
  
To compute the descriptive statistics by more than one grouping variable, we need to pass a grouped data to the argument `.data` with the function `group_by()`. Let's compute the mean, the standard error of the mean and the sample size for the variables `EP` and `EL` for all combinations of the factors `ENV` and `GEN`.

```{r warning=FALSE}
data_ge2 %>% 
  group_by(ENV, GEN) %>% 
  desc_stat(EP, EL,
            stats = c("mean, se, n"))
```
