+++
title = "Data manipulation in R with metan"
linktitle = "Manipulation"
date = "2020/04/03"
toc = true  # Show table of contents? true/false
type = "docs"  # Do not modify.
[menu.example]
    parent = "R package metan"
    weight = 2
+++

```{r global_options, include = FALSE}
knitr::opts_chunk$set(cache = TRUE, comment = "#", fig.align = "center", collapse = TRUE)
```


## Utilities for rows and columns
### Add columns and rows
The functions `add_cols()` and `add_rows()` can be used to add columns and rows, respectively to a data frame.

```{r message=FALSE, warning=FALSE}
library(metan)
add_cols(data_ge,
         ROW_ID = 1:420)

```

It is also possible to add a column based on existing data. Note that the arguments `.after` and `.before` are used to select the position of the new column(s). This is particularly useful to put variables of the same category together.

```{r}
add_cols(data_ge,
         GY2 = GY^2,
         .after = "GY")
```

### Select or remove columns and rows
The functions `select_cols()` and `select_rows()` can be used to select columns and rows, respectively from a data frame.

```{r}
select_cols(data_ge2, ENV, GEN)
select_rows(data_ge2, 1:3)
```

Numeric columns can be selected quickly by using the function `select_numeric_cols()`. Non-numeric columns are selected with `select_non_numeric_cols()`

```{r}
select_numeric_cols(data_ge2)
select_non_numeric_cols(data_ge2)
```

We can select the first or last columns quickly with `select_first_col()` and `select_last_col()`, respectively.

```{r}
select_first_col(data_ge2)
select_last_col(data_ge2)
```


To remove columns or rows, use `remove_cols()` and `remove_rows()`.
```{r}
remove_cols(data_ge2, ENV, GEN)
remove_rows(data_ge2, 1:2, 5:8)
```


### Concatenating columns
The function `concatetate()` can be used to concatenate multiple columns of a data frame. It return a data frame with all the original columns in `.data` plus the concatenated variable, after the last column (by default), or at any position when using the arguments `.before` or `.after`.


```{r}
concatenate(data_ge, ENV, GEN, REP, .after = "REP")
```

To drop the existing variables and keep only the concatenated column, use the argument `drop = TRUE`. To use `concatenate()` within a given function like `add_cols()` use the argument `pull = TRUE` to pull out the results to a vector.
```{r}
concatenate(data_ge, ENV, GEN, REP, drop = TRUE) %>% head()
concatenate(data_ge, ENV, GEN, REP, pull = TRUE) %>% head()
```


To check if a column exists in a data frame, use `column_exists()`

```{r}
column_exists(data_ge, "ENV")
```

### Getting levels
To get the levels and the size of the levels of a factor, the functions `get_levels()` and `get_level_size()` can be used.

```{r}
get_levels(data_ge, ENV)
get_level_size(data_ge, ENV)
```


## Utilities for numbers and strings
### Rounding whole data frames
The function `round_cols()`round a selected column or a whole data frame to the specified number of decimal places (default 0). If no variables are informed, then all numeric variables are rounded.

```{r}
round_cols(data_ge2)
```

Alternatively, select variables to round.
```{r}
round_cols(data_ge2, PH, EP, digits = 1)
```

### Extracting and replacing numbers

The functions `extract_number()`, and `replace_number()` can be used to extract or replace numbers. As an example, we will extract the number of each genotype in `data_g`. By default, the extracted numbers are put as a new variable called `new_var` after the last column of the data.

```{r}
extract_number(data_ge, GEN, .after = "GEN")
```

If the argument `drop` is set to `TRUE` then, only the new variable is kept and all others are dropped.

```{r}
extract_number(data_ge, GEN, drop = TRUE)
```

To pull out the results into a vector, use the argument `pull = TRUE`. This is particularly useful when `extract_*` or `replace_*` are used within a function like `add_cols()`.


```{r}
extract_number(data_ge, GEN, pull = TRUE)
```

To replace numbers of a given column with a specified replacement, use `replace_number()`. By default, numbers are replaced with "". The argument `drop` and `pull` can also be used, as shown above.

```{r}
replace_number(data_ge, GEN)
replace_number(data_ge,
               var = REP,
               pattern = "1",
               replacement = "Rep_1",
               new_var = R_ONE,
               .after = "REP")
```

### Extracting, replacing, and removing strings
The functions `extract_string()`, and `replace_string()` are used in the same context of `extract_number()`, and `replace_number()`, but for handling with strings.

```{r}
extract_string(data_ge, GEN)
```

To replace strings, we can use the function `replace_strings()`.
```{r}
replace_string(data_ge,
               var = GEN,
               new_var = GENOTYPE,
               replacement = "GENOTYPE_",
               .after = "GEN")
```

To remove all strings of a data frame, use `remove_strings()`.
```{r}
remove_strings(data_ge)
```
