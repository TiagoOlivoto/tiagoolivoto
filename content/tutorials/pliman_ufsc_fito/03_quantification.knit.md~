---
title: Fitopatometria
linktitle: "3. Fitopatometria"
toc: true
type: docs
date: "2022/03/31"
draft: false
df_print: paged
code_download: true
menu:
  plimanufsc:
    parent: pliman
    weight: 4
weight: 3
---



# Diretório das imagens

```r
# mudar de acordo com a pasta em seu computador
setwd("E:/Desktop/tiagoolivoto/static/tutorials/pliman_ufsc_fito/leaves")
```


# Severidade da doença
## Utilizando paletas


```r
library(pliman)
```

```
## |==========================================================|
```

```
## | Tools for Plant Image Analysis (pliman 1.1.0)            |
```

```
## | Author: Tiago Olivoto                                    |
```

```
## | Type 'citation('pliman')' to know how to cite pliman     |
```

```
## | Type 'vignette('pliman_start')' for a short tutorial     |
```

```
## | Visit 'http://bit.ly/pkg_pliman' for a complete tutorial |
```

```
## |==========================================================|
```

```r
img <- image_import("exemp_1.jpeg", plot = TRUE)
h <- image_import("exem_h.png")
d <- image_import("exem_d.png")
b <- image_import("exem_b.png")
image_combine(img, h, d, b, ncol = 4)
```

<img src="03_quantification_files/figure-html/doença1-1.png" width="1152" />


## Gerando paletas

```r
h2 <- pick_palette(img)
d2 <- pick_palette(img)
b2 <- pick_palette(img)
image_combine(h2, d2, b2, ncol = 3)
```


### Padrão da função

```r
sev <- 
  measure_disease(img = img,
                  img_healthy = h,
                  img_symptoms = d,
                  img_background = b)
```

<img src="03_quantification_files/figure-html/unnamed-chunk-3-1.png" width="672" />


### Mostrando preenchimento das lesões

```r
sev <- 
  measure_disease(img = img,
                  img_healthy = h,
                  img_symptoms = d,
                  img_background = b,
                  show_contour = FALSE)
```

<img src="03_quantification_files/figure-html/unnamed-chunk-4-1.png" width="672" />


### Mostrando uma máscara

```r
sev <- 
  measure_disease(img = img,
                  img_healthy = h,
                  img_symptoms = d,
                  img_background = b,
                  show_contour = FALSE,
                  show_original = FALSE,
                  col_lesions = "brown") # padrão é "black"
```

<img src="03_quantification_files/figure-html/unnamed-chunk-5-1.png" width="672" />


### Segmentando e analisando as lesões
Ao utilizar `show_features = TRUE`, a função analisa as lesões e retorna resultados como número de lesões, área, perímetro, etc. Com `show_segmentation = TRUE`, as lesões segmentadas são mostradas.

```r
sev <- 
  measure_disease(img = img,
                  img_healthy = h,
                  img_symptoms = d,
                  img_background = b,
                  show_features = TRUE,
                  show_segmentation = TRUE)
```

<img src="03_quantification_files/figure-html/unnamed-chunk-6-1.png" width="672" />

```r
# corrigir as medidas (dpi = 150)
sev_corrected <- get_measures(sev, dpi = 150)
```


## Processamento em lote
Para analisar diversas imagens de um diretório, utiliza-se o argumento `pattern`, para declarar um padrão de nomes de arquivos. Serão utilizadas 15 folhas de soja disponíveis no repositório  https://osf.io/4hbr6, um banco de dados de imagens de anotação de severidade de doenças de plantas. Obrigado a [Emerson M. Del Ponte](https://osf.io/jb6yd/) e seus colaboradores por manter este projeto disponível publicamente.


```r
system.time(
  sev_lote <- 
    measure_disease(pattern = "soy",
                    img_healthy = "soja_h",
                    img_symptoms = "soja_s",
                    img_background = "soja_b",
                    show_image = FALSE,
                    save_image = TRUE,
                    dir_processed = "processadas",
                    show_contour = FALSE,
                    col_lesions = "brown")
)
```

```
## Processing image soy_1 |=                                        | 2% 00:00:00 
```

```
## Processing image soy_10 |==                                      | 4% 00:00:01 
```

```
## Processing image soy_11 |==                                      | 6% 00:00:03 
```

```
## Processing image soy_12 |===                                     | 8% 00:00:05 
```

```
## Processing image soy_13 |====                                    | 10% 00:00:06 
```

```
## Processing image soy_14 |=====                                   | 12% 00:00:07 
```

```
## Processing image soy_15 |======                                  | 14% 00:00:09 
```

```
## Processing image soy_16 |======                                  | 16% 00:00:10 
```

```
## Processing image soy_17 |=======                                 | 18% 00:00:11 
```

```
## Processing image soy_18 |========                                | 20% 00:00:13 
```

```
## Processing image soy_19 |=========                               | 22% 00:00:15 
```

```
## Processing image soy_2 |==========                               | 24% 00:00:16 
```

```
## Processing image soy_20 |==========                              | 26% 00:00:17 
```

```
## Processing image soy_21 |===========                             | 28% 00:00:19 
```

```
## Processing image soy_22 |============                            | 30% 00:00:21 
```

```
## Processing image soy_23 |=============                           | 32% 00:00:21 
```

```
## Processing image soy_24 |==============                          | 34% 00:00:22 
```

```
## Processing image soy_25 |==============                          | 36% 00:00:24 
```

```
## Processing image soy_26 |===============                         | 38% 00:00:26 
```

```
## Processing image soy_27 |================                        | 40% 00:00:28 
```

```
## Processing image soy_28 |=================                       | 42% 00:00:30 
```

```
## Processing image soy_29 |==================                      | 44% 00:00:31 
```

```
## Processing image soy_3 |===================                      | 46% 00:00:33 
```

```
## Processing image soy_30 |===================                     | 48% 00:00:34 
```

```
## Processing image soy_31 |====================                    | 50% 00:00:35 
```

```
## Processing image soy_32 |=====================                   | 52% 00:00:36 
```

```
## Processing image soy_33 |======================                  | 54% 00:00:37 
```

```
## Processing image soy_34 |======================                  | 56% 00:00:39 
```

```
## Processing image soy_35 |=======================                 | 58% 00:00:41 
```

```
## Processing image soy_36 |========================                | 60% 00:00:42 
```

```
## Processing image soy_37 |=========================               | 62% 00:00:44 
```

```
## Processing image soy_38 |==========================              | 64% 00:00:45 
```

```
## Processing image soy_39 |==========================              | 66% 00:00:47 
```

```
## Processing image soy_4 |============================             | 68% 00:00:48 
```

```
## Processing image soy_40 |============================            | 70% 00:00:49 
```

```
## Processing image soy_41 |=============================           | 72% 00:00:50 
```

```
## Processing image soy_42 |==============================          | 74% 00:00:52 
```

```
## Processing image soy_43 |==============================          | 76% 00:00:54 
```

```
## Processing image soy_44 |===============================         | 78% 00:00:54 
```

```
## Processing image soy_45 |================================        | 80% 00:00:56 
```

```
## Processing image soy_46 |=================================       | 82% 00:00:58 
```

```
## Processing image soy_47 |==================================      | 84% 00:00:59 
```

```
## Processing image soy_48 |==================================      | 86% 00:01:00 
```

```
## Processing image soy_49 |===================================     | 88% 00:01:02 
```

```
## Processing image soy_5 |=====================================    | 90% 00:01:03 
```

```
## Processing image soy_50 |=====================================   | 92% 00:01:05 
```

```
## Processing image soy_6 |=======================================  | 94% 00:01:06 
```

```
## Processing image soy_7 |=======================================  | 96% 00:01:07 
```

```
## Processing image soy_8 |======================================== | 98% 00:01:08 
```

```
## Processing image soy_9 |=========================================| 100% 00:01:09 
```

```
##   usuário   sistema decorrido 
##     66.75      3.15     71.05
```

```r
sev_lote$severity
```

```
##       img  healthy symptomatic
## 1   soy_1 92.57050   7.4294950
## 2  soy_10 56.41509  43.5849089
## 3  soy_11 89.11614  10.8838640
## 4  soy_12 62.18394  37.8160573
## 5  soy_13 53.05339  46.9466141
## 6  soy_14 99.81882   0.1811796
## 7  soy_15 72.53207  27.4679271
## 8  soy_16 31.77678  68.2232167
## 9  soy_17 23.08766  76.9123395
## 10 soy_18 80.86392  19.1360779
## 11 soy_19 40.67108  59.3289247
## 12  soy_2 85.63493  14.3650702
## 13 soy_20 34.81765  65.1823541
## 14 soy_21 34.14732  65.8526796
## 15 soy_22 76.56400  23.4360024
## 16 soy_23 59.37893  40.6210734
## 17 soy_24 73.63353  26.3664717
## 18 soy_25 10.38459  89.6154050
## 19 soy_26 27.61473  72.3852693
## 20 soy_27 31.25485  68.7451544
## 21 soy_28 51.98204  48.0179647
## 22 soy_29 22.49082  77.5091825
## 23  soy_3 17.33142  82.6685806
## 24 soy_30 42.46549  57.5345116
## 25 soy_31 13.66226  86.3377361
## 26 soy_32 46.56973  53.4302681
## 27 soy_33 89.46207  10.5379328
## 28 soy_34 47.41326  52.5867386
## 29 soy_35 58.42364  41.5763634
## 30 soy_36 94.45844   5.5415610
## 31 soy_37 35.49255  64.5074466
## 32 soy_38 56.49791  43.5020915
## 33 soy_39 40.95081  59.0491876
## 34  soy_4 64.93078  35.0692169
## 35 soy_40 67.21581  32.7841871
## 36 soy_41 97.06026   2.9397428
## 37 soy_42 85.78564  14.2143639
## 38 soy_43 90.50162   9.4983786
## 39 soy_44 57.75982  42.2401837
## 40 soy_45 83.41647  16.5835286
## 41 soy_46 84.42988  15.5701214
## 42 soy_47 75.74798  24.2520210
## 43 soy_48 75.71771  24.2822899
## 44 soy_49 70.24158  29.7584227
## 45  soy_5 79.08874  20.9112626
## 46 soy_50 53.82375  46.1762544
## 47  soy_6 67.24570  32.7543030
## 48  soy_7 58.00100  41.9990000
## 49  soy_8 44.93855  55.0614526
## 50  soy_9 79.02704  20.9729647
```




## Diagramas de área padrão

Os diagramas de área padrão (SAD) têm sido usados há muito tempo como uma ferramenta para auxiliar na estimativa da severidade de doenças de plantas, servindo como um modelo de referência padrão antes ou durante as avaliações.

Dado um objeto calculado com `measure_disease()`, um SAD com `n` imagens contendo os respectivos valores de severidade é obtido com `sad()`.

As folhas com menor e maior severidade sempre estarão no SAD. Se `n = 1`, a folha com a menor severidade será retornada. As outras são amostradas sequencialmente para obter as `n` imagens após a severidade ter sido ordenada em ordem crescente. Por exemplo, se houver 30 folhas e `n` for definido como 3, as folhas amostradas serão a 1ª, 15ª e 30ª com os menores valores de severidade.

O SAD só pode ser calculado se um nome de padrão de imagem for usado no argumento `pattern` da função `measure_disease()`. Se as imagens forem salvas, as `n` imagens serão recuperadas do diretório `dir_processed` (diretório padrão por default). Caso contrário, a severidade será calculada novamente para gerar as imagens. Um SAD com 8 imagens do exemplo acima pode ser obtido facilmente com:


```r
sad(sev_lote, n = 6, ncol = 3)
```

<img src="03_quantification_files/figure-html/unnamed-chunk-8-1.png" width="672" />

```
##       img  healthy symptomatic rank
## 6  soy_14 99.81882   0.1811796    1
## 41 soy_46 84.42988  15.5701214   10
## 44 soy_49 70.24158  29.7584227   20
## 2  soy_10 56.41509  43.5849089   30
## 31 soy_37 35.49255  64.5074466   40
## 18 soy_25 10.38459  89.6154050   50
```


## Processamento paralelo

Para acelerar o tempo de processamento quando várias imagens estão disponíveis, pode-se utilizar o argumento `paralell`. Isto criará múltiplas seções R em segundo plano, sendo cada uma responsável pelo processamento de uma parte das imagens.


```r
system.time(
  sev_lote <- 
    measure_disease(pattern = "soy",
                    img_healthy = "soja_h",
                    img_symptoms = "soja_s",
                    img_background = "soja_b",
                    show_image = FALSE,
                    parallel = TRUE)
)
```

```
## Image processing using multiple sessions (6). Please wait.
```

```
##   usuário   sistema decorrido 
##      0.39      0.08     22.11
```

No próximo exemplo, são analisadas oito folhas de tomateiro. As imagens são salvas em um arquivo temporário e posteriormente importadas.

```r
dir <- tempdir()

sev_tomate <- 
  measure_disease(pattern = "tomate_",
                  img_healthy = "tom_h",
                  img_symptoms = "tom_s",
                  img_background = "tom_b",
                  col_lesions = "red",
                  show_contour = FALSE,
                  save_image = TRUE,
                  dir_processed = dir,
                  parallel = TRUE)
```

```
## Image processing using multiple sessions (6). Please wait.
```

```r
a <- 
  image_import(pattern = "proc_",
               path = dir,
               plot = TRUE,
               ncol = 4)
```

<img src="03_quantification_files/figure-html/unnamed-chunk-10-1.png" width="768" />


## Várias imagens da mesma amostra

Se os usuários precisarem analisar várias imagens da mesma amostra, as imagens da mesma amostra devem compartilhar o mesmo prefixo de nome de arquivo, que é definido como a parte do nome do arquivo que precede o primeiro hífen (`-`) ou underscore (`_`). 

No exemplo a seguir, 16 imagens serão usadas como exemplos. Aqui, elas representam quatro repetiçoes de quatro diferentes tratamentos (`TRAT1_1, TRAT1_2, ..., TRAT4_4`). Observe que para garantir que todas as imagens sejam processadas, todas as imagens devem compartilhar um padrão comum, neste caso ("TRAT").


```r
system.time(
  sev_trats <- 
    measure_disease(pattern = "TRAT",
                    img_healthy = "feijao_h",
                    img_symptoms = "feijao_s",
                    img_background = "feijao_b",
                    show_features = TRUE,
                    show_image = FALSE,
                    parallel = TRUE)
)
```

```
## Image processing using multiple sessions (6). Please wait.
```

```
##   usuário   sistema decorrido 
##      0.31      0.13      9.81
```

```r
sev <- 
  sev_trats$severity |> 
  separate_col(img, into = c("TRAT", "REP"))

library(ggplot2)
ggplot(sev, aes(TRAT, symptomatic))+
  geom_boxplot() +
  geom_jitter(alpha = 0.3)
```

<img src="03_quantification_files/figure-html/unnamed-chunk-11-1.png" width="672" />




## Múltiplas folhas em uma foto

Quando múltiplas folhas estão presentes em uma imagem, a função `measure_disease` retorna a severidade média das folhas presentes na imagem. Para quantificar a severidade *por folha*, a função `measure_disease_byl()` pode ser utilizada.

Esta função calcula a porcentagem de área foliar sintomática usando paletas de cores ou índices RGB para cada folha (`byl`) de uma imagem. Isso permite, por exemplo, processar réplicas do mesmo tratamento e obter os resultados de cada replicação com uma única imagem. Para fazer isso, as amostras de folhas são primeiro divididas usando a função `object_split()` e, em seguida, a função `measure_disease()` é aplicado à lista de folhas.



