---
title: Visualização
linktitle: "2. Distribuição de frequências"
toc: true
type: docs
date: "2022/04/22"
draft: false
df_print: paged
code_download: true
menu:
  experimentacao:
    parent: Experimentação
    weight: 3
# weight: 1
---


Uma forma de lidar com grandes conjuntos de dados e identificar informações relevantes é agrupar estes dados. O agrupamento é feito em tabelas, denominadas de distribuições de frequências. A construção de distribuição de frequências é geralmente realizada de forma distinta para variáveis discretas (distribuição por pontos) e contínuas (distribuição por classes ou intervalos).

Neste exemplo, vamos utilizar os dados coletados do comprimento, diâmetro e cor de grão de café.

```{r}
library(tidyverse)
library(rio)
library(metan)
library(leem) # criação dos histogramas 

# importar os dados do google sheet
df <- import("https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=353032103",
             dec = ",")
# mostrar os dados
knitr::kable(df)
```


# Variáveis qualitativas e quantitativas discretas

Para exemplificar a construção de tabelas de frequências de variáveis qualitativas / quantitativas discretas, utilizaremos a variável cor do grão. Neste caso, três classes (classes naturais) estão presentes: vermelho, amarelo e verde. Assim, a construção da tabela de frequência diz respeito a contagem de observações em cada uma destas classes e o cálculo das frequências relativas e absolutas. Pode-se criar facilmente esta tabela de frequência combinando as funções `count()` e `mutate()` do pacote `dplyr` (parte do `tidyverse`).

## Representação tabular

```{r}
tab_feq <- 
  df %>%
  count(cor_grao) |>
  mutate(abs_freq = n,
         abs_freq_ac = cumsum(abs_freq),
         rel_freq = abs_freq / sum(abs_freq),
         rel_freq_ac = cumsum(rel_freq))

knitr::kable(tab_feq)
```

## Representação gráfica

Para apresentar estes dados graficamente, pode-se construir um gráfico de barras, mostrando a contagem em cada classe.

```{r}

ggplot(df, aes(cor_grao)) + 
  geom_histogram(stat="count") +
  scale_y_continuous(breaks = 0:15) + 
  labs(x = "Cor do grão",
       y = "Número de observações") +
  theme(panel.grid.minor = element_blank())
```



# Variáveis quantitativas
Para o caso de variáveis quantitativas contínuas (ex. `X`), precisamos agrupar os valores observados em intervalos de classe. Por exemplo, quando medimos uma altura de uma planta (ex. 1,86 m), a altura real não está limitado a segunda casa decimal. Então, a melhor forma será criar regiões (intervalos), de modo que possamos contemplar um conjunto de valores.

Um critério empírico, para definição do número de classes (\$k\$) a ser criado se baseia no número de elementos (\$n\$) na amostra. Caso (\$n\$) seja igual ou inferior a 100, calcula-se o número de classes com \$k = \sqrt{n}\$. Caso (\$n\$) seja maior que 100, calcula-se o número de classes com \$k = 5 \log_{10}(n)\$.


Após a determinação do número de classes, é necessário determinar a amplitude total (\$A\$), dada por:

$$
A = \max(X) - \min(X)
$$

Posteriormente, determina-se a amplitude da classe (\$c\$), dada por:

$$
c = \frac{A}{k - 1}
$$

Por fim, calcula-se o o limite inferior (\$LI_1\$) e superior (\$LS_1\$) da primeira classe, dados por

$$
LI_1 = min(X) - c/2\\\\
$$

$$
LS_1 = LI_1 + c
$$


O valor do limite superior não pertence a classe e será contabilizado para a próxima classe. Dizemos, então, que o conjunto é fechado a esquerda e aberto à direita. O limite inferior da segunda classe é dado pelo limite superior da primeira class (\$LI_2 = LS_1\$); o limite superior da segunda classe é dado por ($LS_2 = LI_2 + c$). Esta lógica segue até completar-se o número de classes do conjunto.

A função `freq_table()` está disponível no pacote metan e é mostrada explicitamente aqui. Ela automatiza o processo de construção de tabelas de frequências, tanto para variáveis qualitativas como quantitativas. Basta informar o conjunto de dados, a variável, e, opcionalmente, o número de classes a ser criado.


```{r eval = FALSE}
freq_table <- function(.data, var, k = NULL, digits = 2){
  if(is_grouped_df(.data)){
    res <- 
      metan::doo(.data,
                 ~freq_table(., {{var}}, k = k, digits = digits))
    freqs <- 
      res %>% 
      mutate(freqs = map(data, ~.x %>% .[["freqs"]])) |> 
      unnest(freqs) |> 
      remove_cols(data)
    breaks <- 
      res |> 
      mutate(freqs = map(data, ~.x %>% .[["breaks"]])) |> 
      # unnest(freqs) |> 
      remove_cols(data)
    list_breaks <- breaks$freqs
    names(list_breaks) <- breaks$cor_grao
    return(list(freqs = freqs,
                breaks = breaks))
    
  } else{
    # function to create a frequence table with continuous variable
    # adapted from https://bendeivide.github.io/book-epaec/book-epaec.pdf
    freq_quant <- function(data, k = NULL, digits = digits){
      # the number of observations
      n <- length(data)
      
      # check the number of classes
      if(is.null(k)){
        if (n > 100) {
          k <- round(5 * log10(n), 0)
        } else{
          k <- round(sqrt(n), 0)
        }
      } else{
        k <- k
      }
      # data range
      rang <- range(data)
      # amplitude
      A <- diff(rang)
      # the size of the class
      c <- round(A / (k - 1), digits = digits)
      
      # lower and upper limit of the first class
      LI1 <- min(rang) - c / 2
      vi <- c(LI1,     rep(0, k - 1))
      vs <- c(LI1 + c, rep(0, k - 1))
      
      # build the other classes
      for (i in 2:k) {
        vi[i] <- vi[i - 1] + c
        vs[i] <- vs[i - 1] + c
      }
      vi <- round(vi, digits = digits)
      vs <- round(vs, digits = digits)
      # Find the frequency of each class
      freq <- function(x, vi, vs, k) {
        freq <- rep(0, k)
        for (i in 1:(k - 1)) {
          freq[i] <- length(x[x >= vi[i] & x < vs[i]])
        }
        freq[k] <- length(x[x >= vi[k] & x <= vs[k]])
        return(freq)
      }
      
      # absolute frequency
      fi <- freq(data, vi, vs, k)
      # check if any class is empty
      if(any(fi == 0)){
        warning("An empty class is not advised. Try to reduce the number of classes with the `k` argument", call. = FALSE)
      }
      # building the classes
      classe <- paste(vi, "|--- ", vs)
      classe[k] <- paste(vi[k], "|---|", vs[k])
      freqs <- 
        data.frame(class = classe,
                   abs_freq = fi) |> 
        mutate(abs_freq_ac = cumsum(abs_freq),
               rel_freq = abs_freq / sum(abs_freq),
               rel_freq_ac = cumsum(rel_freq))
      freqs[nrow(freqs) + 1, ] <- c("Total", sum(freqs[, 2]), sum(freqs[, 2]), 1, 1)
      freqs <- 
        freqs |>
        as_numeric(2:5) |> 
        round_cols(digits = digits)
      
      breaks <- sort(c(vi, vs))
      return(list(freqs = freqs,
                  breaks = breaks))
    }
    
    #check the class of the variable
    class_data <- .data |> pull({{var}}) |> class()
    # if variable is discrete or categorical
    if(class_data %in% c("character", "factor", "integer")){
      df <-
        .data %>%
        count({{var}}) |>
        as_character(1) |> 
        mutate(abs_freq = n,
               abs_freq_ac = cumsum(abs_freq),
               rel_freq = abs_freq / sum(abs_freq),
               rel_freq_ac = cumsum(rel_freq)) |>
        remove_cols(n)
      df[nrow(df) + 1, ] <- c("Total", sum(df[, 2]), sum(df[, 2]), 1, 1)
      df <- df |> as_numeric(2:5)
      return(df)
    }
    # if variable is numeric
    if(class_data == "numeric"){
      data <- .data |> pull({{var}})
      # apply the function freq_quant in the numeric vector
      freq_quant(data, k = k, digits = digits)
    }
  }
}

```

## Apresentação tabular
```{r}
frequencias <- freq_table(df, comp_grao)
knitr::kable(frequencias$freqs)
```


## Apresentação gráfica

```{r}
df$comp_grao |> 
  new_leem(variable = 2) |> 
  hist()
```


# Exemplos discutidos em aula
## Cor do grão do café (grupo 3)
```{r}
df_cor_grao <- import("https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=353032103",
                      dec = ",")


freq_table(df_cor_grao, var = cor_grao) |> knitr::kable()

```



## Altura da turma

```{r}
df_altura <- import("https://docs.google.com/spreadsheets/d/1JMrkppvv1BdGKVCekzZPsPYCKcgUWjxpuDlWqejc22s/edit#gid=1992833755") |> 
  as_numeric(Altura)

# Tabela
dist_altura <- freq_table(df_altura, var = Altura)
dist_altura$freqs|> knitr::kable()

# Gráfico
df_altura$Altura |> 
  new_leem(variable = 2) |> 
  hist()
```

