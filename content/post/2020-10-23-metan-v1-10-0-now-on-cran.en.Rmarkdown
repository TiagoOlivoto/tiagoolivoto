---
title: metan v1.10.0 now on CRAN
author: Tiago Olivoto
date: '2020-10-23'
slug: []
categories:
  - metan
tags:
  - data analysis
  - data manipulation
  - MTSI
  - correlation
  - covariance
  - MGIDI
subtitle: ''
summary: 'Find out the changes made in the v1.10.0 of metan package'
authors: []
lastmod: '2020-10-23T11:58:25-03:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---


```{r global_options, include = FALSE}
knitr::opts_chunk$set(comment = "#", collapse = TRUE)

```

I'm very pleased to announce that `metan` 1.10.0 is now on [CRAN](https://CRAN.R-project.org/package=metan). Some minor improvements and new functions were added in this version. See the release notes bellow.

# New functions

* `get_dist()` to get distance matrices from objects of class `clustering`.

```{r}
library(metan)
d <- data_ge2 %>%
      means_by(GEN) %>%
      column_to_rownames("GEN") %>%
      clustering()
get_dist(d)$d %>% round_cols(digits = 1)

```


* `get_corvars()` to get normal, multivariate correlated variables.
```{r}
sigma <- matrix(c(1,  .3,  0,
                  .3,   1, .9,
                  0,   .9,  1),3,3)
mu <- c(6,50,5)

df <- get_corvars(n = 10000, mu = mu, sigma = sigma, seed = 101010)
means_by(df)
cor(df)
```


* `get_covmat()` to obtain covariance matrix based on variances and correlation values.

```{r}
cormat <-
matrix(c(1,  0.9, -0.4,
         0.9,  1,  0.6,
        -0.4, 0.6, 1),
      nrow = 3,
      ncol = 3)
get_covmat(cormat, var =  c(16, 25, 9))
```


* `as_numeric()`, `as_integer()`, `as_logical()`, `as_character()`, and `as_factor()` to coerce variables to specific formats quickly.
```{r}
library(metan)
library(tibble)
df <-
  tibble(y = rnorm(5),
         x1 = c(1:5),
         x2 = c(TRUE, TRUE, FALSE, FALSE, FALSE),
         x3 = letters[1:5],
         x4 = as.factor(x3))
df

# Convert y to integer
as_integer(df, y)

# convert x3 to factor
as_factor(df, x3)

# Convert all columns to character
as_character(df, everything())

# Convert x2 to numeric and coerce to a vector
as_numeric(df, x2, .keep = "used", .pull = TRUE)
```

* `n_valid()`, `n_missing()`, and `n_unique()` to count valid, missing, and unique values, respectively.
```{r}
library(metan)
data_naz <- iris %>%
              group_by(Species) %>%
              doo(~head(., n = 3)) %>%
              as_character(Species)
data_naz
data_naz[c(2:3, 6, 8), c(1:2, 4, 5)] <- NA
n_valid(data_naz)
n_missing(data_naz, na.rm = TRUE) # na.rm = TRUE to suppress the warning.
n_unique(data_naz, na.rm = TRUE) # na.rm = TRUE to suppress the warning.

```


* `env_stratification()` to perform environment stratification using factor analysis.
```{r}
model <-
env_stratification(data_ge,
                   env = ENV,
                   gen = GEN,
                   resp = everything())
gmd(model)
gmd(model, "FA")
```


# Minor improvements

* `gamem()`, `gamem_met()`, and `waasb()` now have a `by` argument and understand data passed from `group_by`. Let's to compute a mixed model within each environment of dataset `data_ge2` and extract the variance components for each model.
```{r}
model <- gamem(data_ge2,
              gen = GEN,
              rep = REP,
              resp = NR:TKW,
              by = ENV,
              verbose = FALSE)
gmd(model, "vcomp", verbose = FALSE)
```


* `mtsi()` and `mgidi()` now returns the ranks for the contribution of each factor and understand models fitted with `gamem()` and `waasb()` using the `by` argument.
```{r}
mgidi_mod <- mgidi(model,
                   mineval = .1, # force a greater number of factors
                   SI = 40, 
                   verbose = FALSE) 
                                  
gmd(mgidi_mod, verbose = FALSE)
```


* `plot.mtsi()` and `plot.mgidi()` now returns a radar plot by default when using `type = "contribution"`.
```{r fig.width=10}
p1 <- plot(mgidi_mod$data[[1]], type = "contribution")
p2 <- plot(mgidi_mod$data[[1]], type = "contribution", radar = FALSE)
arrange_ggplot(p1, p2)
```


* `get_model_data()` now returns the genotypic and phenotypic correlation matrices from objects of class `waasb` and `gamem`.
```{r}
(pcor <- gmd(model$data[[1]], "pcor"))
(gcor <- gmd(model$data[[1]], "gcor"))

```


* The new function `make_lower_upper()` makes it easier to combine two symmetric matrices into one lower-upper diagonal matrix. In the following example, we'll put the phenotypic correlation matrix in the lower diagonal and the genotypic correlations in the upper diagonal.
```{r}
make_lower_upper(pcor, gcor, diag = 1)
```



