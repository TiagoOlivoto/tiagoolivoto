---
title: metan v1.6.0 on CRAN
author: TiagoOlivoto
date: '2020-05-21'
slug: metan-v1-6-0-on-cran
categories:
  - metan
tags: []
subtitle: ''
summary: 'Find out the changes made in the v1.6.0 of metan package'
authors: []
lastmod: '2020-05-21T11:26:48-03:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---


```{r global_options, include = FALSE}
knitr::opts_chunk$set(comment = "#", collapse = TRUE)

```


## New functions
* `Smith_Hazel()` and `print.sh()` and `plot.sh()` for computing the Smith and Hazel selection index.


The Smith-Hazel index is computed with the function `Smith_Hazel()`. Users can compute the index either by declaring known genetic and phenotypic variance-covariance matrices or by using as inpute data, a model fitted with the function `gamem()`. In this case, the variance-covariance are extracted internally. The economic weights in the argument `weights` are set by default to 1 for all traits.

```{r  }
library(metan)
mod <- gamem(data_g, GEN, REP, starts_with("N"))
smith <- Smith_Hazel(mod)
print(smith)
```




## Minor improvements
* `get_model_data()` now extracts the genotypic and phenotypic variance-covariance matrix from objects of class `gamem` and `waasb`.

```{r}
get_model_data(mod, "gcov")
get_model_data(mod, "pcov")
```

* `fai_blup()` now returns the total genetic gain and the list with the ideotypes' construction.

```{r}
fai <- fai_blup(mod)
```

* `mgidi()` now computes the genetic gain when a mixed-model is used as input data.

```{r}
mgidi_index <- mgidi(mod)
```

* The S3 method [`plot()`](https://tiagoolivoto.github.io/metan/reference/plot.mgidi.html) for objects of class `mgidi` has a new argument `type = "contribution"` to plot the contribution of each factor in the MGIDI index.

```{r}
plot(mgidi_index, type = "contribution")
```

* `plot_scores()` now can produce a biplot showing other axes besides PC1 and PC2. To change the default IPCA in each axis use the new arguments `first` and `second`.
```{r fig.width=8}
ammi <- performs_ammi(data_ge, ENV, GEN, REP, GY)
p1 <- plot_scores(ammi, type = 2)
p2 <- plot_scores(ammi, type = 2, second = "PC3")
arrange_ggplot(p1, p2)
```


Find out more about `metan` at https://tiagoolivoto.github.io/metan/
